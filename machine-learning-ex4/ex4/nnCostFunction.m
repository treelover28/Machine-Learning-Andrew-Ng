function [J grad] = nnCostFunction(nn_params, ...
                                   input_layer_size, ...
                                   hidden_layer_size, ...
                                   num_labels, ...
                                   X, y, lambda)
%NNCOSTFUNCTION Implements the neural network cost function for a two layer
%neural network which performs classification
%   [J grad] = NNCOSTFUNCTON(nn_params, hidden_layer_size, num_labels, ...
%   X, y, lambda) computes the cost and gradient of the neural network. The
%   parameters for the neural network are "unrolled" into the vector
%   nn_params and need to be converted back into the weight matrices. 
% 
%   The returned parameter grad should be a "unrolled" vector of the
%   partial derivatives of the neural network.
%

% Reshape nn_params back into the parameters Theta1 and Theta2, the weight matrices
% for our 2 layer neural network
Theta1 = reshape(nn_params(1:hidden_layer_size * (input_layer_size + 1)), ...
                 hidden_layer_size, (input_layer_size + 1));

Theta2 = reshape(nn_params((1 + (hidden_layer_size * (input_layer_size + 1))):end), ...
                 num_labels, (hidden_layer_size + 1));

% Setup some useful variables
m = size(X, 1);
         
% You need to return the following variables correctly 
J = 0;
Theta1_grad = zeros(size(Theta1));
Theta2_grad = zeros(size(Theta2));

% ====================== YOUR CODE HERE ======================
% Instructions: You should complete the code by working through the
%               following parts.
%
% Part 1: Feedforward the neural network and return the cost in the
%         variable J. After implementing Part 1, you can verify that your
%         cost function computation is correct by verifying the cost
%         computed in ex4.m

X = [ones(m,1) X];
a1 = X;
% Theta1 has size 25 x 401
% X has dimension 5000 x 401
z2 = X* Theta1'; %z2 has dimenion 5000 * 25
a2 = [ones(m,1) sigmoid(z2)];  % add bias a2 column so new a2 has dimension 5000 * 26
% Theta2 has dimension of 10x26.
z3 = a2 * Theta2'; %z3 has dimension 5000 * 10 
% each row represent each training set and each column represent the probability of training set being that number;
a3 = sigmoid(z3); 
% hx has dimension 5000 x 10 
hx = a3; 

for k = 1: num_labels
  yk = y == k; % y is a 5000x1 vector containing answer label 
  % the == returns vector with same size with 1 where values equal k and 0 where not
  % thus, for example if k is 1, return yk (5000 x 1] with 1 where values = 1 and 0 where not. 
  hxK = hx(:,k); % return everything on column k
   % Cost at each kth label
  JK = -1/m * sum(yk.*log(hxK) + (1-yk).*log(1-hxK));
  J = J +JK; % add up all cost generated by each output units. 
end;

% apply regularization only on non-bias values of theta so exclude first bias column of 1s
regularization = lambda/(2*m) * (sum(sum(Theta1(:,2:end).^2)) + sum(sum(Theta2(:,2:end).^2)));
J = J + regularization;


% Part 2: Implement the backpropagation algorithm to compute the gradients
%         Theta1_grad and Theta2_grad. You should return the partial derivatives of
%         the cost function with respect to Theta1 and Theta2 in Theta1_grad and
%         Theta2_grad, respectively. After implementing Part 2, you can check
%         that your implementation is correct by running checkNNGradients
%
%         Note: The vector y passed into the function is a vector of labels
%               containing values from 1..K. You need to map this vector into a 
%               binary vector of 1's and 0's to be used with the neural network
%               cost function.
%
%         Hint: We recommend implementing backpropagation using a for-loop
%               over the training examples if you are implementing it for the 
%               first time.

for i = 1:m
  for n = 1:num_labels
    % Compare ith row of y to kth num_label compute yn
    yn = y(i) == n; %this yK has dimension 1 x 1 a real number
    delta3(n) = hx(i,n) - yn; % find difference between real label and hypothesis
    % delta3(k) should be 0 where hx = yK and -1 
    % delta3 has dimension 5000x10 
  end;
  %sigmoidGradient(z2) should have 5000 x 25 dimension so we must add one bias column in front to match. Transpose as well
  %Theta2' has dimension 26 x 10
  %delta3' has dimension 10 x 5000
  %g'(z2)' has dimension 5000 x 2
  %delta2 has 26 x 2 dimension. One column for bias value and another for actual error in each hidden unit. 
  delta2 = Theta2'*delta3' .* sigmoidGradient([1 z2(i,:)])'; % grab everything on row i of z2 and appened a bias column of 1 in front so 2*5000
  delta2 = delta2(2:end); % Unroll while getting rid of delta2_0 ( the bias value)
  % new delta2 has dimension 25 x 2
  
  %Theta2_grad has dimension 10 x 26 
  %delta3' 10x5000
  Theta2_grad = Theta2_grad + delta3'*a2(i,:); % a2 has dimension 5000 * 26 
  
  %delta2 has 1 x 59 dimension.
   %a1 everything on row i has dimension 1 x 401
   %Theta1_grad has dimension 25 x 401
  Theta1_grad = Theta1_grad + delta2*a1(i,:); 
end;

% without regularization term
Theta1_grad = (1/m) * Theta1_grad;
Theta2_grad = (1/m) * Theta2_grad;

%
% Part 3: Implement regularization with the cost function and gradients.
%
%         Hint: You can implement this around the code for
%               backpropagation. That is, you can compute the gradients for
%               the regularization separately and then add them to Theta1_grad
%               and Theta2_grad from Part 2.
%
% everything from column 2 to end is regularized. 
Theta1_grad(:,2:end) = Theta1_grad(:,2:end) + (lambda/m)*Theta1(:,2:end); % because first column of Theta is bias value
Theta2_grad(:,2:end) = Theta2_grad(:,2:end) + (lambda/m)*Theta2(:,2:end); 

% -------------------------------------------------------------

% =========================================================================

% Unroll gradients
grad = [Theta1_grad(:) ; Theta2_grad(:)];


end
